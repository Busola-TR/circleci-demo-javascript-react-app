# version: 2.1
# workflows: 
#  workflow-1:
#   jobs:
#    - docker-test

# jobs:
#   docker-test:
#    docker:
#     - image: cimg/node:17.2-browsers
#    steps:
#     - checkout
#     - setup_remote_docker:
#         docker_layer_caching: true
#     - run: docker build .
    
# version: 2.1


#   default-executor:
#     docker:
#       - image: cimg/python:3.8  # This image is a good base for installing additional tools

# jobs:
#   trivy-scan:
#      docker:
#       - image: cimg/python:3.8
#      steps:
#       - checkout # Checks out your source code
#       - run:
#           name: Update and Install curl, Trivy, and Helm
#           command: |
#             # Update package lists and install necessary packages
#             sudo apt-get update && sudo apt-get install -y curl

#             # Install Trivy
#             curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.54.1

#             # Install Helm
#             curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | sudo bash
#       - run:
#           name: Verify Trivy Installation and Scan Files
#           command: |
#             # Verify Trivy installation
#             trivy --version

#             # Scan files in the current directory, including Helm charts
#             # trivy fs --skip-files=.git,.github,.circleci --ignore-unfixed .
#             trivy fs --severity HIGH,CRITICAL --exit-code 1 --ignore-unfixed -o trivy.json . || true
#             # Check Trivy scan result
#             if [ -s trivy.json ]; then
#               echo "Trivy scan results:"
#               cat trivy.json
#             else
#               echo "No vulnerabilities found or an error occurred."
#             fi
#       - store_artifacts:
#           path: trivy.json
#           destination: trivy.json
            
#   semgrep-full-scan:
#     docker:
#       - image: semgrep/semgrep
#     steps:
#       - checkout
#       - run:
#           name: "Semgrep OSS full scan"
#           command: semgrep ci --config auto --output semgrep.json    
#       - store_artifacts:
#           path: semgrep.json
#           destination: semgrep.json
          
#   iac-checkov:
#     docker:
#       - image: bridgecrew/checkov:3.2.238
#     steps:
#       - checkout
#       - run:
#           name: Run Checkov
#           command: |
#             checkov --directory . --output-file checkov.json --output json || true
#       - store_artifacts:
#           path: checkov.json
#           destination: checkov.json



#   gitleaks-scan:
#     docker:
#       - image: zricethezav/gitleaks:v8.18.4
#     steps:
#       - checkout
#       - run:
#           name: Run Gitleaks Scan
#           command: gitleaks detect --verbose --source . -f json -r gitleaks.json
#       - store_artifacts:
#           path: gitleaks.json
#           destination: gitleaks.json
#       - run:
#           name: Allow Failure
#           command: echo "Gitleaks job allowed to fail" || true

#   owasp-dependency-check:
#     docker:
#       - image: cimg/python:3.8
#     steps:
#       - checkout
#       - setup_remote_docker:
#           version: 20.10.14
#       - run:
#           name: Make Dependency Check Script Executable
#           command: |
#             chmod +x scripts/dependency-check.sh
#       - run:
#           name: Run OWASP Dependency Check
#           command: |
#            ./scripts/dependency-check.sh
#       - store_artifacts:
#           path: odc-reports
#           destination: owasp-dependency-check-reports
# workflows:
#   version: 2
#   scan:
#     jobs:
#       - trivy-scan
#       - iac-checkov
#       - gitleaks-scan
#       - semgrep-full-scan
#       - owasp-dependency-check


version: 2.1

# workflows:
#   version: 2
#   owasp_workflow:
#     jobs:
#       - update-owasp-db:
#           filters:
#             branches:
#               only:
#                 - main  # This runs only on main branch, or use a cron job
#       - run-owasp-scan:
#           requires:
#             - update-owasp-db  # Ensure it runs after updating
#           filters:
#             branches:
#               only:
#                 - main  # Run scans on the main branch

# jobs:
#   # Job to update OWASP DB and upload it to S3
#   update-owasp-db:
#     machine:
#       image: ubuntu-2204:2024.05.1  # Use a machine executor with Docker pre-installed
#     steps:
#       - run:
#           name: "Install AWS CLI"
#           command: |
#             sudo apt-get update && sudo apt-get install -y awscli unzip curl
#       - run:
#           name: "Create OWASP Dependency-Check Data Directory"
#           command: |
#             mkdir -p $HOME/OWASP-Dependency-Check/data
#       - run:
#           name: "Download and Install OWASP Dependency-Check CLI"
#           command: |
#             curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.4/dependency-check-10.0.4-release.zip && \
#             unzip dependency-check.zip -d $HOME/OWASP-Dependency-Check && \
#             chmod +x $HOME/OWASP-Dependency-Check/dependency-check/bin/dependency-check.sh
#       - run:
#           name: "Update OWASP Dependency-Check Database"
#           command: |
#             $HOME/OWASP-Dependency-Check/dependency-check/bin/dependency-check.sh --updateonly --data $HOME/OWASP-Dependency-Check/data
#       - run:
#           name: "Upload ODC Data to S3"
#           command: |
#             aws s3 sync $HOME/OWASP-Dependency-Check/data s3://owasp-dependency-cache/owasp-data --delete

#   # Job to pull DB from S3 and run OWASP Dependency-Check scan
#   run-owasp-scan:
#     machine:
#       image: ubuntu-2204:2024.05.1  # Use a machine executor with Docker pre-installed
#     steps:
#       - run:
#           name: "Install AWS CLI"
#           command: |
#             sudo apt-get update && sudo apt-get install -y awscli unzip curl
#       - checkout  # Ensure the code is checked out for scanning
#       - run:
#           name: "Create OWASP Dependency-Check Data Directory"
#           command: |
#             mkdir -p $HOME/OWASP-Dependency-Check/data
#       - run:
#           name: "Download OWASP Data from S3"
#           command: |
#             aws s3 sync s3://owasp-dependency-cache/owasp-data $HOME/OWASP-Dependency-Check/data
#       - run:
#           name: "Download and Install OWASP Dependency-Check CLI"
#           command: |
#             curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.4/dependency-check-10.4.0-release.zip && \
#             unzip dependency-check.zip -d $HOME/OWASP-Dependency-Check && \
#             chmod +x $HOME/OWASP-Dependency-Check/dependency-check/bin/dependency-check.sh
#       - run:
#           name: "Run OWASP Dependency-Check Scan"
#           command: |
#             $HOME/OWASP-Dependency-Check/dependency-check/bin/dependency-check.sh --scan $(pwd) \
#             --format "XML" \
#             --project "My Project" \
#             --out $(pwd)/dependency-check-report.xml \
#             --data $HOME/OWASP-Dependency-Check/data \
#             --suppression $(pwd)/suppression.xml \
#             --failOnCVSS 7
#       - store_artifacts:
#           path: dependency-check-report.xml
#           destination: dependency-check-report


jobs:
  run-owasp-scan:
    docker:
      - image: owasp/dependency-check:latest
    steps:
      - checkout
      - run:
          name: "Install AWS CLI"
          command: |
            - apk --no-cache add curl python3 py3-pip
            - pip3 install --no-cache-dir awscli

      - run:
          name: "Download OWASP Data from S3"
          command: |
            aws s3 sync s3://owasp-dependency-cache /tmp/owasp-data
      - run:
          name: "Run OWASP Dependency-Check"
          command: |
            dependency-check.sh --scan . \
              --format "XML" \
              --project "My Project" \
              --out /tmp/dependency-check-report \
              --data /tmp/owasp-data  # Use the downloaded OWASP data
      - store_artifacts:
          path: /tmp/dependency-check-report
          destination: dependency-check-report

workflows:
  version: 2
  run-owasp-scan:
    jobs:
      - run-owasp-scan
















